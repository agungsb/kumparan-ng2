{"version":3,"file":"angular2-indexeddb.js","sourceRoot":"","sources":["angular2-indexeddb.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nimport {Injectable} from '@angular/core';\r\n\r\n@Injectable()\r\nexport class AngularIndexedDB {\r\n    utils: Utils;\r\n    dbWrapper: DbWrapper;\r\n\r\n    constructor(dbName, version) {\r\n        this.utils = new Utils();\r\n        this.dbWrapper = new DbWrapper(dbName, version);\r\n    }\r\n\r\n    createStore(version, upgradeCallback) {\r\n        let self = this,\r\n            promise = new Promise<any>((resolve, reject) => {\r\n                this.dbWrapper.dbVersion = version;\r\n                let request = this.utils.indexedDB.open(this.dbWrapper.dbName, version);\r\n                request.onsuccess = function (e) {\r\n                    self.dbWrapper.db = request.result;\r\n                    resolve();\r\n                };\r\n\r\n                request.onerror = function (e) {\r\n                    reject(\"IndexedDB error: \" + e.target.errorCode);\r\n                };\r\n\r\n                request.onupgradeneeded = function (e) {\r\n                    upgradeCallback(e, self.dbWrapper.db);\r\n                };\r\n            });\r\n\r\n        return promise;\r\n    }\r\n\r\n    getByKey(storeName: string, key: any) {\r\n        let self = this;\r\n        let promise = new Promise<any>((resolve, reject) => {\r\n            self.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\r\n            let transaction = self.dbWrapper.createTransaction({\r\n                storeName: storeName,\r\n                dbMode: self.utils.dbMode.readOnly,\r\n                error: (e: Event) => {\r\n                    reject(e);\r\n                },\r\n                complete: (e: Event) => {\r\n                    resolve(result);\r\n                }\r\n            }),\r\n                objectStore = transaction.objectStore(storeName),\r\n                result,\r\n                request;\r\n\r\n            request = objectStore.get(key);\r\n            request.onsuccess = function (event) {\r\n                result = event.target.result;\r\n            }\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    getAll(storeName: string) {\r\n        let self = this;\r\n        let promise = new Promise<any>((resolve, reject) => {\r\n            self.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\r\n            let transaction = self.dbWrapper.createTransaction({\r\n                storeName: storeName,\r\n                dbMode: self.utils.dbMode.readOnly,\r\n                error: (e: Event) => {\r\n                    reject(e);\r\n                },\r\n                complete: (e: Event) => {\r\n                    resolve(result);\r\n                }\r\n            }),\r\n                objectStore = transaction.objectStore(storeName),\r\n                result = [],\r\n                request = objectStore.openCursor();\r\n\r\n            request.onerror = function (e) {\r\n                reject(e);\r\n            };\r\n\r\n            request.onsuccess = function (evt) {\r\n                var cursor = (<IDBOpenDBRequest>evt.target).result;\r\n                if (cursor) {\r\n                    result.push(cursor.value);\r\n                    cursor[\"continue\"]();\r\n                }\r\n            };\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    add(storeName: string, value: any, key: any) {\r\n        let self = this;\r\n        let promise = new Promise<any>((resolve, reject) => {\r\n            self.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\r\n            let transaction = self.dbWrapper.createTransaction({\r\n                storeName: storeName,\r\n                dbMode: self.utils.dbMode.readWrite,\r\n                error: (e: Event) => {\r\n                    reject(e);\r\n                },\r\n                complete: (e: Event) => {\r\n                    resolve({ key: key, value: value });\r\n                }\r\n            }),\r\n                objectStore = transaction.objectStore(storeName);\r\n\r\n            objectStore.add(value, key);\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    update(storeName: string, value: any, key: any) {\r\n        let self = this;\r\n        let promise = new Promise<any>((resolve, reject) => {\r\n            self.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\r\n            let transaction = self.dbWrapper.createTransaction({\r\n                storeName: storeName,\r\n                dbMode: self.utils.dbMode.readWrite,\r\n                error: (e: Event) => {\r\n                    reject(e);\r\n                },\r\n                complete: (e: Event) => {\r\n                    resolve(value);\r\n                },\r\n                abort: (e: Event) => {\r\n                    reject(e);\r\n                }\r\n            }),\r\n                objectStore = transaction.objectStore(storeName);\r\n\r\n            objectStore.put(value, key);\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    delete(storeName: string, key: any) {\r\n        console.log(key);\r\n        let self = this;\r\n        let promise = new Promise<any>((resolve, reject) => {\r\n            self.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\r\n            let transaction = self.dbWrapper.createTransaction({\r\n                storeName: storeName,\r\n                dbMode: self.utils.dbMode.readWrite,\r\n                error: (e: Event) => {\r\n                    reject(e);\r\n                },\r\n                complete: (e: Event) => {\r\n                    resolve();\r\n                },\r\n                abort: (e: Event) => {\r\n                    reject(e);\r\n                }\r\n            }),\r\n                objectStore = transaction.objectStore(storeName);\r\n\r\n            objectStore[\"delete\"](key);\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    openCursor(storeName, cursorCallback: (evt) => void) {\r\n        let self = this;\r\n        let promise = new Promise<any>((resolve, reject) => {\r\n            self.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\r\n            let transaction = self.dbWrapper.createTransaction({\r\n                storeName: storeName,\r\n                dbMode: self.utils.dbMode.readOnly,\r\n                error: (e: Event) => {\r\n                    reject(e);\r\n                },\r\n                complete: (e: Event) => {\r\n                    resolve();\r\n                },\r\n                abort: (e: Event) => {\r\n                    reject(e);\r\n                }\r\n            }),\r\n                objectStore = transaction.objectStore(storeName),\r\n                request = objectStore.openCursor();\r\n\r\n            request.onsuccess = (evt) => {\r\n                cursorCallback(evt);\r\n                resolve();\r\n            };\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    clear(storeName: string) {\r\n        let self = this;\r\n        let promise = new Promise<any>((resolve, reject) => {\r\n            self.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\r\n            let transaction = self.dbWrapper.createTransaction({\r\n                storeName: storeName,\r\n                dbMode: self.utils.dbMode.readWrite,\r\n                error: (e: Event) => {\r\n                    reject(e);\r\n                },\r\n                complete: (e: Event) => {\r\n                    resolve();\r\n                },\r\n                abort: (e: Event) => {\r\n                    reject(e);\r\n                }\r\n            }),\r\n                objectStore = transaction.objectStore(storeName);\r\n            objectStore.clear();\r\n            resolve();\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    getByIndex(storeName: string, indexName: string, key: any) {\r\n        let self = this;\r\n        let promise = new Promise<any>((resolve, reject) => {\r\n            self.dbWrapper.validateBeforeTransaction(storeName, reject);\r\n\r\n            let transaction = self.dbWrapper.createTransaction({\r\n                storeName: storeName,\r\n                dbMode: self.utils.dbMode.readOnly,\r\n                error: (e: Event) => {\r\n                    reject(e);\r\n                },\r\n                complete: (e: Event) => {\r\n                    resolve(result);\r\n                },\r\n                abort: (e: Event) => {\r\n                    reject(e);\r\n                }\r\n            }),\r\n                result,\r\n                objectStore = transaction.objectStore(storeName),\r\n                index = objectStore.index(indexName),\r\n                request = index.get(key);\r\n\r\n            request.onsuccess = (event) => {\r\n                result = (<IDBOpenDBRequest>event.target).result;\r\n            };\r\n        });\r\n\r\n        return promise;\r\n    }\r\n}\r\n\r\nclass Utils {\r\n    dbMode: DbMode;\r\n    indexedDB;\r\n\r\n    constructor() {\r\n        this.indexedDB = window.indexedDB || (<any>window).mozIndexedDB || (<any>window).webkitIndexedDB || window.msIndexedDB;\r\n        this.dbMode = {\r\n            readOnly: \"readonly\",\r\n            readWrite: \"readwrite\"\r\n        };\r\n    }\r\n}\r\n\r\ninterface DbMode {\r\n    readOnly: string;\r\n    readWrite: string;\r\n}\r\n\r\nclass DbWrapper {\r\n    dbName: string;\r\n    dbVersion: number;\r\n    db: IDBDatabase;\r\n\r\n    constructor(dbName, version) {\r\n        this.dbName = dbName;\r\n        this.dbVersion = version || 1;\r\n        this.db = null;\r\n    }\r\n\r\n    validateStoreName(storeName) {\r\n        return this.db.objectStoreNames.contains(storeName);\r\n    };\r\n\r\n    validateBeforeTransaction(storeName: string, reject) {\r\n        if (!this.db) {\r\n            reject('You need to use the createStore function to create a database before you query it!');\r\n        }\r\n        if (!this.validateStoreName(storeName)) {\r\n            reject(('objectStore does not exists: ' + storeName));\r\n        }\r\n    }\r\n\r\n    createTransaction(options: { storeName: string, dbMode: string, error: (e: Event) => any, complete: (e: Event) => any, abort?: (e: Event) => any }): IDBTransaction {\r\n        let trans: IDBTransaction = this.db.transaction(options.storeName, options.dbMode);\r\n        trans.onerror = options.error;\r\n        trans.oncomplete = options.complete;\r\n        trans.onabort = options.abort;\r\n        return trans;\r\n    }\r\n}"]}